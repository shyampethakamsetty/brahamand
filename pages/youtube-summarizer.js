import React, { useState, useRef } from "react";
import PageHead from "./Head";
import Context from "@/context/Context";
import HeaderDashboard from "@/components/Header/HeaderDashboard";
import PopupMobileMenu from "@/components/Header/PopUpMobileMenu";
import LeftDashboardSidebar from "@/components/Header/LeftDashboardSidebar";
import Link from "next/link";
import { Home, Send, AlertTriangle } from 'react-feather';

const YouTubeSummarizerPage = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [summary, setSummary] = useState(null);
  const [url, setUrl] = useState('');
  const [suggestedQuestions, setSuggestedQuestions] = useState([]);
  const [followUpQuestion, setFollowUpQuestion] = useState('');
  const [questionAnswer, setQuestionAnswer] = useState(null);
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [conversationHistory, setConversationHistory] = useState([]);
  const formRef = useRef(null);
  const chatEndRef = useRef(null);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleUrlChange = (e) => {
    setUrl(e.target.value);
    setError(null);
    // Reset states when URL changes
    setSummary(null);
    setSuggestedQuestions([]);
    setQuestionAnswer(null);
    setConversationHistory([]);
  };

  const handleClear = () => {
    setUrl('');
    setError(null);
    setSummary(null);
    setSuggestedQuestions([]);
    setQuestionAnswer(null);
    setFollowUpQuestion('');
    setConversationHistory([]);
  };

  const handleQuestionClick = async (question) => {
    setFollowUpQuestion(question);
    await handleFollowUpQuestion(question);
  };

  const handleFollowUpQuestion = async (question) => {
    if (!question.trim()) return;

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/get_summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          videoUrl: url,
          followUpQuestion: question 
        }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to get answer');
      }

      const data = await response.json();
      setQuestionAnswer(data.answer);
      setConversationHistory(prev => [...prev, {
        question,
        answer: data.answer
      }]);
      setFollowUpQuestion('');
      setTimeout(scrollToBottom, 100);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSummarize = async (e) => {
    if (e) {
      e.preventDefault();
    }

    const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;
    
    if (!youtubeRegex.test(url)) {
      setError('Please enter a valid YouTube URL');
      return;
    }

    setIsLoading(true);
    setError(null);
    setSummary(null);
    setSuggestedQuestions([]);
    setQuestionAnswer(null);
    setConversationHistory([]);

    try {
      const response = await fetch('/api/get_summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ videoUrl: url }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to get summary');
      }

      const data = await response.json();
      setSummary(data.summary);
      setSuggestedQuestions(data.suggestedQuestions || []);
      setIsAutoGenerated(data.isAutoGenerated);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <PageHead title="YouTube Summarizer - AI Tools" />

      <main className="page-wrapper rbt-dashboard-page">
        <Context>
          <div className="rbt-panel-wrapper">
            <HeaderDashboard display="d-none" />
            <PopupMobileMenu />
            <LeftDashboardSidebar />

            <div className="rbt-main-content">
              <div className="rbt-daynamic-page-content">
                <div className="rbt-dashboard-content bg-color-white">
                  <div className="content-page pb--20">
                    <div className="d-flex justify-content-between align-items-center mb-4">
                      <h3 className="title" style={{ color: '#000' }}>YouTube Summarizer</h3>
                      <Link href="/" className="btn" style={{
                        background: 'linear-gradient(45deg, #3F51B5, #5677fd)',
                        color: 'white',
                        borderRadius: '8px',
                        padding: '8px 16px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                        boxShadow: '0 4px 10px rgba(63, 81, 181, 0.2)',
                        fontWeight: '500'
                      }}>
                        <Home size={16} /> Home
                      </Link>
                    </div>

                    <div className="youtube-summarizer-container">
                      <form ref={formRef} onSubmit={handleSummarize} className="input-group mb-3" style={{ position: 'relative' }}>
                        <input
                          type="text"
                          className="form-control"
                          placeholder="Enter YouTube URL"
                          value={url}
                          onChange={handleUrlChange}
                          style={{
                            borderRadius: '8px 0 0 8px',
                            border: '1px solid #e0e0e0',
                            padding: '12px 16px',
                            fontSize: '14px',
                            color: '#000',
                            paddingRight: '40px',
                            transition: 'all 0.3s ease',
                            boxShadow: '0 2px 4px rgba(0,0,0,0.02)',
                          }}
                        />
                        <button
                          type="button"
                          className="btn btn-link"
                          onClick={handleClear}
                          style={{
                            position: 'absolute',
                            right: '120px',
                            top: '50%',
                            transform: 'translateY(-50%)',
                            color: '#666',
                            padding: '0 8px',
                            fontSize: '18px',
                            background: 'none',
                            border: 'none',
                            cursor: 'pointer',
                            zIndex: 2,
                            transition: 'all 0.2s ease',
                            opacity: '0.6',
                            ':hover': {
                              opacity: '1',
                              transform: 'translateY(-50%) scale(1.1)'
                            }
                          }}
                        >
                          Ã—
                        </button>
                        <button
                          type="submit"
                          className="btn btn-primary"
                          disabled={isLoading}
                          style={{
                            borderRadius: '0 8px 8px 0',
                            background: 'linear-gradient(45deg, #3F51B5, #5677fd)',
                            border: 'none',
                            padding: '12px 24px',
                            fontWeight: '500',
                            opacity: isLoading ? 0.7 : 1,
                            transition: 'all 0.3s ease',
                            transform: 'translateY(0)',
                            boxShadow: '0 2px 8px rgba(63, 81, 181, 0.2)',
                            ':hover': {
                              transform: 'translateY(-1px)',
                              boxShadow: '0 4px 12px rgba(63, 81, 181, 0.3)'
                            }
                          }}
                        >
                          {isLoading ? 'Processing...' : 'Summarize'}
                        </button>
                      </form>

                      {error && (
                        <div className="alert alert-danger" role="alert" style={{
                          marginTop: '20px',
                          borderRadius: '8px',
                          padding: '12px 16px'
                        }}>
                          {error}
                        </div>
                      )}

                      {isLoading && (
                        <div className="loading-container" style={{
                          marginTop: '20px',
                          textAlign: 'center',
                          padding: '20px'
                        }}>
                          <div className="spinner-border text-primary" role="status">
                            <span className="visually-hidden">Loading...</span>
                          </div>
                          <p style={{ marginTop: '10px', color: '#666' }}>
                            {questionAnswer ? 'Getting answer...' : 'Generating summary...'}
                          </p>
                        </div>
                      )}

                      {summary && (
                        <div className="chat-container" style={{ 
                          maxWidth: '800px', 
                          margin: '20px auto',
                          transition: 'all 0.3s ease' 
                        }}>
                          <div className="summary-card" style={{
                            background: '#ffffff',
                            padding: '24px',
                            borderRadius: '12px',
                            marginBottom: '24px',
                            boxShadow: '0 4px 16px rgba(0,0,0,0.06)',
                            border: '1px solid #e9ecef',
                            transition: 'all 0.3s ease',
                            ':hover': {
                              boxShadow: '0 6px 20px rgba(0,0,0,0.08)',
                              transform: 'translateY(-2px)'
                            }
                          }}>
                            {isAutoGenerated && (
                              <div className="auto-generated-warning" style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '8px',
                                padding: '10px 16px',
                                background: '#fff3cd',
                                borderRadius: '8px',
                                marginBottom: '20px',
                                border: '1px solid #ffeeba'
                              }}>
                                <AlertTriangle size={16} color="#856404" />
                                <span style={{ color: '#856404', fontSize: '14px' }}>
                                  This summary is based on auto-generated captions and may contain errors.
                                </span>
                              </div>
                            )}
                            <div className="summary-content" style={{
                              color: '#2d3748',
                              lineHeight: '1.8',
                              fontSize: '16px',
                              whiteSpace: 'pre-line'
                            }}>
                              {summary && summary.replace(/\*\*/g, '')}
                            </div>
                          </div>

                          {suggestedQuestions.length > 0 && (
                            <div className="suggested-questions" style={{
                              marginBottom: '24px',
                              padding: '20px',
                              background: '#f8fafc',
                              borderRadius: '12px',
                              border: '1px solid #e2e8f0',
                              boxShadow: '0 4px 12px rgba(0,0,0,0.04)',
                              transition: 'all 0.3s ease',
                              ':hover': {
                                boxShadow: '0 6px 16px rgba(0,0,0,0.06)'
                              }
                            }}>
                              <h4 style={{ 
                                marginBottom: '16px', 
                                color: '#2d3748',
                                fontSize: '18px',
                                fontWeight: '600'
                              }}>Suggested Questions</h4>
                              <div style={{
                                display: 'flex',
                                flexWrap: 'wrap',
                                gap: '10px'
                              }}>
                                {suggestedQuestions.map((q, index) => (
                                  <button
                                    key={index}
                                    onClick={() => handleQuestionClick(q.text)}
                                    className="btn btn-outline-primary"
                                    style={{
                                      fontSize: '14px',
                                      padding: '8px 16px',
                                      borderRadius: '20px',
                                      background: '#ffffff',
                                      border: '1px solid #3F51B5',
                                      color: '#3F51B5',
                                      cursor: 'pointer',
                                      transition: 'all 0.2s ease',
                                      boxShadow: '0 2px 6px rgba(0,0,0,0.05)',
                                      ':hover': {
                                        background: '#3F51B5',
                                        color: '#ffffff',
                                        transform: 'translateY(-1px)',
                                        boxShadow: '0 4px 8px rgba(63, 81, 181, 0.2)'
                                      }
                                    }}
                                  >
                                    {q.text}
                                  </button>
                                ))}
                              </div>
                            </div>
                          )}

                          <div className="follow-up-input" style={{
                            marginTop: '24px',
                            position: 'relative',
                            background: '#ffffff',
                            padding: '16px',
                            borderRadius: '12px',
                            boxShadow: '0 2px 12px rgba(0,0,0,0.06)',
                            border: '1px solid #e2e8f0',
                            transition: 'all 0.3s ease',
                            ':hover': {
                              boxShadow: '0 4px 16px rgba(0,0,0,0.08)'
                            }
                          }}>
                            <input
                              type="text"
                              value={followUpQuestion}
                              onChange={(e) => setFollowUpQuestion(e.target.value)}
                              placeholder="Ask a follow-up question..."
                              style={{
                                width: '100%',
                                padding: '12px 50px 12px 16px',
                                borderRadius: '8px',
                                border: '1px solid #e2e8f0',
                                fontSize: '15px',
                                color: '#2d3748',
                                background: '#f8fafc',
                                transition: 'all 0.3s ease',
                                ':focus': {
                                  outline: 'none',
                                  border: '1px solid #3F51B5',
                                  boxShadow: '0 0 0 3px rgba(63, 81, 181, 0.1)'
                                }
                              }}
                              onKeyPress={(e) => {
                                if (e.key === 'Enter' && !isLoading) {
                                  handleFollowUpQuestion(followUpQuestion);
                                }
                              }}
                            />
                            <button
                              onClick={() => handleFollowUpQuestion(followUpQuestion)}
                              disabled={isLoading || !followUpQuestion.trim()}
                              style={{
                                position: 'absolute',
                                right: '24px',
                                top: '50%',
                                transform: 'translateY(-50%)',
                                background: 'none',
                                border: 'none',
                                color: followUpQuestion.trim() ? '#3F51B5' : '#cbd5e0',
                                cursor: followUpQuestion.trim() ? 'pointer' : 'default',
                                padding: '8px',
                                transition: 'all 0.2s ease',
                                ':hover': {
                                  transform: 'translateY(-50%) scale(1.1)'
                                }
                              }}
                            >
                              <Send size={20} />
                            </button>
                          </div>
                          <div ref={chatEndRef} />
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Context>
      </main>
    </>
  );
};

export default YouTubeSummarizerPage; 