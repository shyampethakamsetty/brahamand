/*
import { YoutubeTranscript } from 'youtube-transcript';
import { Configuration, OpenAIApi } from 'openai';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

// Helper function to extract video ID from YouTube URL
function extractVideoId(url) {
  try {
    // Handle different YouTube URL formats
    const patterns = [
      /(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([^&]+)/,
      /(?:https?:\/\/)?(?:www\.)?youtube\.com\/embed\/([^?]+)/,
      /(?:https?:\/\/)?(?:www\.)?youtu\.be\/([^?]+)/,
      /(?:https?:\/\/)?(?:www\.)?youtube\.com\/v\/([^?]+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) return match[1];
    }
    return null;
  } catch (error) {
    return null;
  }
}

const summarizationPrompt = `You are a professional content summarizer. You will receive a transcript from a YouTube video. Create a comprehensive summary that captures the main points and flow of the video as if it's one continuous piece. Structure your response as follows:

**Overview:**
- A brief 2-3 sentence overview of the main topic and key message of the video

**Key Points:**
- List the main points and important details discussed in the video
- Include any significant examples, case studies, or demonstrations
- Highlight key statistics or data mentioned
- Maintain the logical flow of ideas as presented in the video

**Conclusion:**
- Summarize the main takeaways
- Include any call to action or final thoughts from the video

Make the summary clear, concise, and well-organized. Use bullet points for better readability. 
Important: If this is part of a longer video, focus on connecting ideas rather than treating it as an isolated segment.`;

// Helper function to get the best available transcript
async function getBestTranscript(videoId) {
  try {
    // First try to get manual English transcript
    try {
      return await YoutubeTranscript.fetchTranscript(videoId, {
        lang: 'en',
        allowGenerated: false
      });
    } catch (error) {
      // If manual English not available, try auto-generated
      try {
        return await YoutubeTranscript.fetchTranscript(videoId, {
          lang: 'en',
          allowGenerated: true
        });
      } catch (error) {
        // If no English available, try any available transcript
        return await YoutubeTranscript.fetchTranscript(videoId);
      }
    }
  } catch (error) {
    if (error.message.includes('Could not find any captions')) {
      throw new Error('No captions available for this video');
    }
    throw error;
  }
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { videoUrl, followUpQuestion } = req.body;

    if (!videoUrl) {
      return res.status(400).json({ error: 'Video URL is required' });
    }

    const videoId = extractVideoId(videoUrl);
    if (!videoId) {
      return res.status(400).json({ error: 'Invalid YouTube URL' });
    }

    const transcript = await getBestTranscript(videoId);
    const isAutoGenerated = transcript.some(t => t.isAutoGenerated);

    // Combine transcript text
    const transcriptText = transcript.map(t => t.text).join(' ');

    if (followUpQuestion) {
      // Handle follow-up question
      const response = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that answers questions about YouTube video content."
          },
          {
            role: "user",
            content: `Based on this video transcript: "${transcriptText}"\n\nAnswer this question: ${followUpQuestion}`
          }
        ],
        temperature: 0.7,
        max_tokens: 500
      });

      return res.status(200).json({
        success: true,
        answer: response.data.choices[0].message.content,
        isAutoGenerated
      });
    } else {
      // Generate summary
      const response = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: summarizationPrompt
          },
          {
            role: "user",
            content: transcriptText
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      });

      // Generate suggested questions
      const questionsResponse = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Generate 3-5 relevant follow-up questions about the video content. Return them as a JSON array of objects with 'text' property."
          },
          {
            role: "user",
            content: `Based on this video transcript: "${transcriptText}"`
          }
        ],
        temperature: 0.7,
        max_tokens: 200
      });

      let suggestedQuestions = [];
      try {
        suggestedQuestions = JSON.parse(questionsResponse.data.choices[0].message.content);
      } catch (error) {
        console.error('Error parsing suggested questions:', error);
      }

      return res.status(200).json({
        success: true,
        summary: response.data.choices[0].message.content,
        suggestedQuestions,
        isAutoGenerated
      });
    }
  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ 
      error: error.message || 'Failed to process video',
      details: error.message
    });
  }
}
*/ 